////
/// Radio Buttons & Checkboxes
/// @group Component - Forms
/// @author Damián Muti
////

///
$msuif-rc-width: toem(20px) !default;
///
$msuif-rc-height: toem(20px) !default;
///
$msuif-rc-font-size: toem(16px) !default;
///
$msuif-rc-label-color: #000 !default;
///
$msuif-rc-marker-color: #fff !default;
///
$msuif-rc-background-color: #CD5C5C !default;
///
$msuif-rc-radio-marker: '\25CF' !default; // Unicode for '●'
///
$msuif-rc-checkbox-marker: '\2714' !default; // Unicode for '✔'
///
$msuif-rc-checkbox-border-radius: toem(3px) !default;

/// Mixin that styles Radio buttons and
/// Checkboxes with CSS only.
/// @param {string} $type - Indicates input type. Accepted values: `radio` or `checkbox`.
/// @param {string} $style [inline-block] - Element's box model behavior. Accepted values: `inline-block` or `block`.
/// @param {color} $label-color [#000] - Element's label color.
/// @param {color} $label-color [#fff] - Element's marker color.
/// @param {color} $label-color [#CD5C5C] - Element's background color.
/// @see {mixin} form
/// @example scss - Using the mixin
///   @include do-radio-checkbox(checkbox, block, black, red, blue);
/// @example markup - HTML structure: Element must be followed by a label tag to properly work and inherit styles
///   <input type="checkbox" id="element">
///   <label for="element">Elements's label</label>


@mixin form-radio-checkbox($type, $style: inline-block, $label-color: $msuif-rc-label-color, $marker-color: $msuif-rc-marker-color, $background-color: $msuif-rc-background-color) {
  @if not index(radio checkbox, $type) {
    @error "Element type must be either `radio` or `checkbox`.";
  }
  @if not index(block inline-block, $style) {
    @error "Element style must be either `block` or `inline-block`.";
  }
  @if type-of($label-color) != color or type-of($marker-color) != color or type-of($background-color) != color {
    @error "Param must be a valid color value. E.g: `#000`.";
  }

  // Default styles
  [type="checkbox"],
  [type="radio"]{
    &:checked,
    &:not(:checked) {
      position: absolute;
      left: -9999px;

      + label {
        position: relative;
        display: $style;
        padding-left: $msuif-rc-width * 1.25;
        line-height: $msuif-rc-height;
        color: $label-color;
        cursor: pointer;

        @if $style == block {
          margin-bottom: #{($inputs-height/2)};
        }

        @if $style == inline-block {
          margin-right: $msuif-rc-width * 1.25;
        }

        // Not :checked state
        &:before {
          content: '';
          position: absolute;
          left: 0;
          width: $msuif-rc-width;
          height: $msuif-rc-height;
          background-color: $background-color;
          border: 1px dotted transparent;
          transition: all $msuif-transition-duration $msuif-transition-timing;

          @if $type == checkbox {
            border-radius: $msuif-rc-checkbox-border-radius
          }

          @if $type == radio {
            border-radius: toem(9999px);
          }
        }

        // :checked state
        &:after {
          @if $type == radio {
            content: $msuif-rc-radio-marker;
          }
          @else if $type == checkbox {
            content: $msuif-rc-checkbox-marker;
          }

          position: absolute;
          left: 0;
          width: $msuif-rc-width;
          font-size: $msuif-rc-font-size;
          text-align: center;
          color: $marker-color;
          transition: transform #{$msuif-transition-duration / 2} $msuif-transition-timing;
        }
      }
    }

    // Marker transition on :checked
    &:not(:checked) {
      + label {
        &:after {
          opacity: 0;
          transform: scale(0);
        }
      }
    }

    &:checked {
      + label {
        &:after {
          opacity: 1;
          transform: scale(1);
        }
      }
    }

    // :disabled state
    &:disabled {
      &:checked,
      &:not(:checked) {
        + label {
          opacity: 0.25;
        }
      }
    }

    // :focus state
    &:focus,
    &:hover {
      + label {
        &:before {
          background-color: shade($background-color, 25%);
        }
      }
    }
  }
}
